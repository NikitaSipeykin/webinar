Очень краткий повтор основ с курса JAVA 1

Что такое классы и объекты?
Что такое инкапсуляция?
Какие модификаторы доступа существуют и зачем они нужны?
Как получить доступ к private полю объекта?
Что такое наследование и зачем оно нужно?
Что такое полиморфизм?
Что такое конструкторы, зачем они нужны, как взаимодействуют конструкторы родителей и наследников?
Что такое абстрактные классы и методы?
Что такое статические поля и методы?
От какого класса наследуются все классы?
Что такое cast и instanceof?
Где и как хранятся объекты в памяти?
Есть ли в Java множественное наследование?
Что такое интерфейсы?


    Что такое классы и объекты?

        Классы в Java - это шаблоны, определяющие состояние и поведение объектов. Класс описывает атрибуты (переменные)
        и методы (функции) объектов, которые могут быть созданы на его основе. Класс можно рассматривать как тип
        данных, определенный пользователем. Он содержит описание свойств и действий, которые могут быть выполнены с
        объектами этого класса.

        Объекты в Java - это экземпляры класса, созданные на основе его определения. Они представляют собой конкретные
        экземпляры классов, которые могут быть использованы в программе для выполнения определенных задач. Объекты могут
        иметь свои уникальные значения атрибутов, и могут вызывать методы, определенные в классе, для выполнения
        определенных действий.

        Классы и объекты являются основными строительными блоками ООП, и позволяют программистам организовывать код в
        логически связанные единицы, упрощать разработку и поддержку программы, а также повышать ее модульность и
        расширяемость. Классы и объекты в Java также позволяют использовать принципы наследования, инкапсуляции и
        полиморфизма, что делает ООП мощным подходом для разработки сложных программных систем.

    Что такое инкапсуляция?

        В Java инкапсуляция является одним из принципов объектно-ориентированного программирования (ООП) и означает
        скрытие внутренних деталей реализации класса и предоставление только публичного интерфейса для взаимодействия с
        объектами этого класса. В Java инкапсуляция реализуется с использованием модификаторов доступа, таких как
        private, protected и public, для определения видимости полей (переменных) и методов класса.

        Основные аспекты инкапсуляции в Java включают:

        1. Приватные поля (переменные): Поля, объявленные как private, доступны только внутри класса, в котором они
        объявлены. Это означает, что они не могут быть доступны извне класса, включая подклассы и другие классы в том
        же пакете.
        2. Публичные и защищенные методы: Методы, объявленные как public или protected, могут быть доступны извне класса и
        позволяют взаимодействовать с приватными полями класса. Методы могут выполнять различные операции с данными,
        скрывая их реализацию.
        3. Геттеры и сеттеры: Геттеры (методы получения) и сеттеры (методы установки) являются публичными методами,
        предназначенными для доступа и изменения значений приватных полей класса соответственно. Они позволяют
        контролировать доступ и изменение данных, осуществлять проверку и обработку данных перед их использованием или
        сохранением.

        Применение инкапсуляции в Java позволяет создавать классы с четкими интерфейсами, защищать данные от
        неправильного использования, скрывать реализацию класса и обеспечивать лучшую модульность, безопасность и
        поддерживаемость кода.

    Какие модификаторы доступа существуют и зачем они нужны?

        Существуют модификаторы default(package private), private, protected и public.

                     *
                    ***
                   *****
                  *******
                 *private*
                * default * (package private)
               * protected *
              *    public   *
             *****************


        1. Приватные поля (переменные): Поля, объявленные как private, доступны только внутри класса, в котором они
        объявлены. Это означает, что они не могут быть доступны извне класса, включая подклассы и другие классы в том
        же пакете.
        2. Публичные и защищенные методы: Методы, объявленные как public или protected, могут быть доступны извне класса и
        позволяют взаимодействовать с приватными полями класса. Методы могут выполнять различные операции с данными,
        скрывая их реализацию.
        3. Модификатор доступа default (или без модификатора) в Java также является одним из уровней доступа и применяется,
        когда не указаны явные модификаторы доступа (private, protected, public) для полей, методов, интерфейсов или
        классов. Модификатор доступа default имеет особые правила видимости в рамках пакета, к которому принадлежит
        класс или интерфейс.

        Основные аспекты модификатора доступа default в Java включают:

        Доступ внутри пакета: Поля и методы, объявленные с модификатором default, могут быть доступны из других классов
        в том же пакете. Это означает, что они видимы только внутри пакета, к которому принадлежит класс или интерфейс.
        Ограниченный доступ извне пакета: Поля и методы с модификатором default не могут быть доступны из классов,
        находящихся в других пакетах. Другими словами, они не видимы за пределами своего пакета.
        Использование в интерфейсах: В интерфейсах модификатор default может использоваться для определения методов,
        имеющих реализацию по умолчанию. Эти методы могут быть доступны внутри интерфейса и наследоваться подклассами
        интерфейса, но не могут быть вызваны извне интерфейса.
        Модификатор доступа default обеспечивает ограниченную видимость полей и методов внутри пакета, что может быть
        полезно для организации внутренней структуры классов в пакете и обеспечения модульности и безопасности кода
        внутри пакета. Однако, следует быть внимательным при использовании модификатора default, так как доступ к таким
        элементам класса может быть неожиданно возможен из других классов в том же пакете.

    Как получить доступ к private полю объекта?

        Напрямую никак.
        Но можно использовать вспомогательные методы гетеры и сетеры.

    Что такое наследование и зачем оно нужно?

        Наследование - это один из основных принципов объектно-ориентированного программирования (ООП), позволяющий
        создавать новые классы на основе существующих классов, называемых родительскими (базовыми) классами. Класс,
        созданный на основе другого класса, называется производным (подклассом, наследником). Процесс создания нового
        класса на основе существующего класса называется наследованием.

        Наследование в Java и других языках программирования позволяет использовать уже существующий код из
        родительского класса и расширять его функциональность, добавляя новые поля, методы или переопределяя
        существующие методы. Производные классы наследуют свойства (поля) и поведение (методы) от родительских классов,
        что позволяет создавать иерархии классов и повторно использовать код.

        Зачем нужно наследование:

        1. Повторное использование кода: Наследование позволяет использовать уже существующий код из родительского класса,
        что уменьшает дублирование кода и способствует более эффективному разработке программного обеспечения.
        2. Расширение функциональности: Производные классы могут расширять функциональность родительского класса, добавляя
        новые поля и методы, или переопределять существующие методы, что позволяет создавать более специализированные
        классы на основе общего базового класса.
        3. Создание иерархий классов: Наследование позволяет создавать иерархии классов, где родительский класс может быть
        абстрактным или интерфейсом, а производные классы представляют его конкретные реализации. Это позволяет
        организовать код в логические структуры и упрощает его поддержку и расширение.
        4. Полиморфизм: Наследование также поддерживает концепцию полиморфизма, когда объекты производных классов могут
        быть использованы вместо объектов родительского класса, что обеспечивает гибкость и возможность замены объектов
        разных классов в рамках единого интерфейса.

    Что такое полиморфизм?

        Полиморфизм - это один из ключевых принципов объектно-ориентированного программирования (ООП), который позволяет
        использовать объекты разных классов через единый интерфейс или общий базовый класс. Полиморфизм позволяет
        обрабатывать объекты разных классов как однотипные объекты, что делает код более гибким и универсальным.

        В Java и других языках программирования полиморфизм может проявляться на нескольких уровнях:

        1. Полиморфизм параметров: Методы могут принимать аргументы разных типов, если эти типы наследуются от общего
        базового класса или реализуют общий интерфейс. Это позволяет передавать разные объекты в качестве аргументов
        одного и того же метода, что делает код более гибким и универсальным.
        2. Полиморфизм возвращаемых значений: Методы могут возвращать объекты различных типов, которые наследуются от
        общего базового класса или реализуют общий интерфейс. Это позволяет возвращать разные типы объектов из одного и
        того же метода в зависимости от условий, что может быть удобно в различных ситуациях.
        3. Полиморфизм приведения типов (упаковка/распаковка): Объекты одного класса могут быть приведены к объектам
        другого класса, если они наследуются от общего базового класса. Это позволяет выполнять операции с объектами
        разных классов через общий интерфейс, расширяя возможности использования кода.
        4. Полиморфизм через интерфейсы: Интерфейсы в Java предоставляют возможность реализации полиморфизма на уровне
        интерфейсов, когда различные классы могут реализовывать общий интерфейс и быть использованы в коде через этот
        интерфейс. Это позволяет создавать гибкие и расширяемые системы, где классы могут быть заменяемыми, если они
        реализуют один и тот же интерфейс.

        ***  чем отличается полиморфизм от переопределения?

        Полиморфизм и переопределение - это два различных концепта в объектно-ориентированном программировании, которые
        имеют свои особенности и применяются в разных ситуациях.

        Полиморфизм: Полиморфизм - это возможность использования объектов различных классов с одним и тем же интерфейсом
        или базовым типом данных. Он позволяет работать с объектами разных классов, используя общий интерфейс или
        базовый тип данных, без необходимости знать конкретный тип объекта на этапе компиляции. Полиморфизм может быть
        реализован в Java с использованием интерфейсов или абстрактных классов.
        Переопределение: Переопределение - это процесс замены реализации метода в подклассе, который уже определен в его
        родительском классе. Когда метод с тем же именем и сигнатурой (типами аргументов) определен в подклассе, как и
        в его родительском классе, то метод в подклассе переопределяет реализацию метода в родительском классе.
        Переопределение позволяет подклассам предоставлять свою собственную реализацию метода, а не наследовать
        реализацию из родительского класса.
        Основные различия между полиморфизмом и переопределением:

        Полиморфизм относится к использованию объектов разных классов с одним и тем же интерфейсом или базовым типом
        данных.
        Переопределение относится к замене реализации метода в подклассе, который уже определен в его родительском
        классе.
        Полиморфизм позволяет использовать объекты разных классов с общим интерфейсом без необходимости знать конкретный
        тип объекта на этапе компиляции.
        Переопределение позволяет подклассам предоставлять свою собственную реализацию метода, заменяя реализацию из
        родительского класса.
        Полиморфизм может быть достигнут с использованием интерфейсов или абстрактных классов, а переопределение
        происходит при наличии метода с тем же именем и сигнатурой в подклассе, как и в его родительском классе.

        *** чем отличается полиморфизм от перегрузки?

        Полиморфизм и перегрузка - это два различных концепта в объектно-ориентированном программировании.

        Полиморфизм: Полиморфизм - это возможность использования объектов различных классов с одним и тем же интерфейсом
        или базовым типом данных. Он позволяет работать с объектами разных классов, используя общий интерфейс или
        базовый тип данных, без необходимости знать конкретный тип объекта на этапе компиляции. Полиморфизм может быть
        реализован в Java с использованием интерфейсов или абстрактных классов.
        Перегрузка: Перегрузка - это процесс определения нескольких методов с одним и тем же именем в одном классе, но с
        различными сигнатурами (различными параметрами). Перегрузка позволяет использовать несколько методов с одним и
        тем же именем, но с различными параметрами, в одном классе. Когда вызывается перегруженный метод, компилятор
        выбирает подходящий метод на основе типов аргументов, переданных при вызове.
        Основные различия между полиморфизмом и перегрузкой:

        Полиморфизм относится к использованию объектов разных классов с одним и тем же интерфейсом или базовым типом
        данных.
        Перегрузка относится к определению нескольких методов с одним и тем же именем, но с различными сигнатурами
        (различными параметрами) в одном классе.
        Полиморфизм позволяет работать с объектами разных классов через общий интерфейс или базовый тип данных без
        необходимости знать конкретный тип объекта на этапе компиляции.
        Перегрузка позволяет определить несколько методов с одним и тем же именем, но с различными параметрами, в одном
        классе.
        Полиморфизм может быть достигнут с использованием интерфейсов или абстрактных классов, а перегрузка происходит
        при определении нескольких методов с одним и тем же именем, но с различными сигнатурами в одном классе.

    Что такое конструкторы, зачем они нужны, как взаимодействуют конструкторы родителей и наследников?

        Конструкторы - это специальные методы в классах объектно-ориентированного программирования, которые вызываются
        при создании нового объекта класса. Конструкторы имеют тот же имя, что и класс, и не возвращают значения,
        включая void. Основная цель конструктора - инициализация полей объекта в момент его создания.

        Конструкторы выполняют следующие задачи:

        1. Создание объекта: Конструкторы создают новый объект класса и выделяют для него память в памяти компьютера.
        Они инициализируют поля объекта начальными значениями, определенными в конструкторе или переданными как
        аргументы.
        2. Инициализация полей: Конструкторы могут инициализировать поля объекта значениями, переданными в конструктор
        как аргументы, или с помощью значений по умолчанию, заданных в самом конструкторе.
        3. Выполнение дополнительных действий: Конструкторы могут содержать дополнительный код, который выполняется при
        создании объекта, такой как проверка параметров, инициализация дополнительных ресурсов, установка связей с
        другими объектами и т.д.

        В Java конструкторы имеют следующие особенности:

        Имя конструктора совпадает с именем класса.
        Конструкторы не возвращают значения, включая void.
        Если в классе не определен ни один конструктор, компилятор автоматически создает конструктор без аргументов
        (конструктор по умолчанию).
        Если в классе определен хотя бы один конструктор, компилятор не создает конструктор по умолчанию.

        Конструкторы родителей и наследников взаимодействуют в процессе наследования, когда объект наследника создается.
        Когда объект наследника создается с помощью конструктора, вызывается конструктор наследника, который может в
        свою очередь вызывать конструктор родителя. Этот процесс происходит автоматически и называется цепочкой вызовов
        конструкторов.

        При создании объекта наследника, конструктор наследника может использовать ключевое слово super для вызова
        конструктора родителя. Это позволяет выполнить инициализацию полей родительского класса перед инициализацией
        полей наследника. Вызов конструктора родителя с помощью super должен быть выполнен на первой строке конструктора
        наследника.

        Если в классе наследника не указан конструктор, то компилятор автоматически добавляет конструктор по умолчанию,
        который вызывает конструктор родителя без аргументов с помощью super(). Если в классе наследника определен один
        или несколько конструкторов, то он должен явно вызвать конструктор родителя с помощью super() или
        super(аргументы) на первой строке своих конструкторов, и передать ему необходимые аргументы, если конструктор
        родителя требует их.

    Что такое абстрактные классы и методы?

        Абстрактные классы в Java - это классы, которые не могут быть созданы в виде объектов, а служат как шаблоны или
        основы для других классов. Они могут содержать абстрактные методы (методы без тела), которые должны быть
        реализованы в подклассах наследниках. Класс, содержащий хотя бы один абстрактный метод, также должен быть
        объявлен абстрактным с использованием ключевого слова abstract.

        Абстрактные классы используются для создания иерархий классов, где общая функциональность реализуется в
        абстрактном классе, а конкретная реализация оставляется для наследующих классов. Они также могут содержать
        реализацию обычных (нет абстрактных) методов и поля данных.

        Основные особенности абстрактных классов:

        1. Нельзя создавать объекты абстрактных классов. Они могут использоваться только в качестве базы для создания
        подклассов.
        2. Абстрактный класс может содержать абстрактные методы, которые должны быть реализованы в наследующих классах.
        3. Абстрактный класс может содержать обычные (нет абстрактных) методы с реализацией.
        4. Подклассы наследуют поля и методы абстрактного класса.
        5. Подклассы наследующих абстрактный класс должны либо реализовать все абстрактные методы, либо быть объявлены
        абстрактными сами.

        Абстрактные методы в Java - это методы, которые объявлены в абстрактном классе или интерфейсе, но не имеют
        реализации (тела). Они используются как шаблоны, которые должны быть реализованы в подклассах наследниках или
        классах, реализующих интерфейсы.

        Абстрактные методы объявляются с использованием ключевого слова abstract перед их сигнатурой, и они не могут
        иметь реализации в абстрактном классе или интерфейсе, в котором они объявлены. Подклассы наследующие абстрактный
        класс или классы, реализующие интерфейсы с абстрактными методами, обязаны реализовать эти абстрактные методы и
        предоставить конкретную реализацию в своих классах.

        Основные особенности абстрактных методов:

        1. Абстрактные методы объявляются с ключевым словом abstract и не имеют реализации в абстрактном классе или
        интерфейсе.
        2. Абстрактные методы не могут быть объявлены в обычных (не абстрактных) классах.
        3. Абстрактные методы должны быть реализованы в подклассах наследниках или классах, реализующих интерфейсы с
        такими методами.

    Что такое статические поля и методы?

        Статические поля и методы в Java относятся к классу в целом, а не к его экземплярам (объектам). Они объявляются
        с использованием ключевого слова static и имеют следующие особенности:

        1. Статические поля (также называемые классовыми полями) - это переменные, которые принадлежат классу, а не
        объектам класса. Они разделяются между всеми экземплярами класса и имеют только одну копию в памяти.
        2. Статические методы (также называемые классовыми методами) - это методы, которые могут вызываться на классе,
        а не на объекте класса. Они не имеют доступа к нестатическим (обычным) полям и методам объектов класса, так как
        они не могут быть вызваны на конкретном экземпляре класса.

        Основные особенности статических полей и методов:

        1. Статические поля и методы объявляются с использованием ключевого слова static.
        2. Статические поля принадлежат классу и разделяются между всеми экземплярами класса.
        3. Статические методы могут вызываться на классе, а не на объекте класса.
        4. Статические методы не имеют доступа к нестатическим полям и методам объектов класса.

    От какого класса наследуются все классы?

        В языке программирования Java все классы наследуются от одного базового класса, называемого Object. Класс Object
        является корневым классом в иерархии классов в Java и находится в пакете java.lang. Все классы, даже те, которые
        не указывают явно наследование от других классов, автоматически наследуются от класса Object.

        Класс Object предоставляет некоторые общие методы, такие как toString(), equals(), hashCode(), getClass(),
        которые могут быть переопределены или использованы в пользовательских классах. Они предназначены для общего
        использования во всех классах и предоставляют базовую функциональность, такую как преобразование объекта в
        строковое представление, сравнение объектов, вычисление хэш-кода и другие операции.

        Наследование от класса Object позволяет использовать общие методы и функциональность во всех классах Java и
        предоставляет единый базовый функционал для всех объектов в языке.

    Что такое cast и instanceof?

        Cast (или приведение типов) - это операция в программировании, которая позволяет явно изменить тип данных
        переменной из одного типа в другой тип. Приведение типов может быть необходимо, когда требуется выполнить
        операции между переменными разных типов, или когда нужно преобразовать переменную из одного типа в другой для
        корректной работы программы.

        В Java, например, существует два типа приведения типов:

        1. Приведение типов вниз (Downcasting): это приведение объекта от более общего типа к более специфическому типу.
        Например, если у нас есть класс-родитель Animal и класс-наследник Dog, то мы можем выполнить приведение типов от
        Animal к Dog, чтобы получить доступ к методам и полям, специфичным для класса Dog.
        Пример:

        Animal animal = new Dog(); // Создаем объект Dog и присваиваем его переменной типа Animal
        Dog dog = (Dog) animal; // Приводим тип Animal к типу Dog

        2. Приведение типов вверх (Upcasting): это приведение объекта от более специфического типа к более общему типу.
        Например, если у нас есть класс-наследник Dog и класс-родитель Animal, то мы можем выполнить приведение типов от
        Dog к Animal, чтобы передать объект класса Dog в метод, ожидающий аргумент типа Animal.
        Пример:

        Dog dog = new Dog(); // Создаем объект Dog
        Animal animal = (Animal) dog; // Приводим тип Dog к типу Animal

        Однако при приведении типов нужно быть осторожными, так как неправильное приведение типов может привести к
        ошибкам во время выполнения программы, таким как ClassCastException, если объект нельзя корректно привести к
        указанному типу. Поэтому рекомендуется использовать приведение типов с умом и только тогда, когда это
        действительно необходимо.

        instanceof - это оператор в Java, который позволяет проверить, является ли объект экземпляром определенного
        класса или его наследников. Он возвращает булевое значение true или false в зависимости от того, соответствует
        ли объект указанному классу или его наследникам.

        Пример использования оператора instanceof:

        Animal animal = new Dog(); // Создаем объект Dog и присваиваем его переменной типа Animal

        if (animal instanceof Dog) {
            Dog dog = (Dog) animal; // Приводим тип Animal к типу Dog
            // Выполняем операции, специфичные для класса Dog
        } else if (animal instanceof Cat) {
            Cat cat = (Cat) animal; // Приводим тип Animal к типу Cat
            // Выполняем операции, специфичные для класса Cat
        } else {
            // Обработка других классов
        }

        Оператор instanceof полезен, когда требуется выполнить различные операции в зависимости от типа объекта во время
        выполнения программы. Однако следует быть осторожным при использовании этого оператора, так как он может
        указывать на нарушение принципов объектно-ориентированного программирования, таких как инкапсуляция и
        полиморфизм, и может сигнализировать о необходимости пересмотреть дизайн программы.

    Где и как хранятся объекты в памяти?

        Объекты в Java хранятся в динамической области памяти, известной как "куча" (heap). Куча - это область памяти,
        выделенная для хранения объектов и доступная для динамического выделения и освобождения памяти во время
        выполнения программы.

        При создании объекта в Java с использованием оператора new, выделяется блок памяти в куче, достаточный для
        хранения данных объекта, и ссылка на этот блок памяти возвращается как результат операции new. Ссылка на объект
        может быть сохранена в переменной или передана в другие части программы для дальнейшего использования.

        Объекты в куче остаются в памяти до тех пор, пока на них есть хотя бы одна ссылка, указывающая на них. Когда
        ссылки на объект перестают существовать, объект становится подлежащим сборке мусора (garbage collection) и может
        быть удален из памяти для освобождения ресурсов.

        Кроме того, в Java также существует стек (stack) - еще одна область памяти, где хранятся локальные переменные и
        временные значения во время выполнения методов. Стек имеет ограниченный размер и управляется автоматически
        компилятором Java, в отличие от кучи, которая управляется сборщиком мусора.

    Есть ли в Java множественное наследование?

        В Java отсутствует поддержка множественного наследования классов, то есть класс не может наследоваться напрямую
        от нескольких классов. Java поддерживает только одиночное наследование классов, что означает, что каждый класс
        может наследовать только от одного класса.

        Однако в Java есть возможность реализации множественного наследования через интерфейсы. Интерфейс - это
        абстрактный класс, содержащий только абстрактные методы и константы. Классы могут реализовывать несколько
        интерфейсов, и таким образом, иметь функциональность от нескольких источников. Это позволяет достичь некоторых
        аналогичных эффектов множественного наследования.

        Например, в Java можно создать интерфейс для определения функциональности "летания" и другой интерфейс для
        определения функциональности "плавания", и затем классы могут реализовывать оба этих интерфейса, чтобы получить
        возможность и летать, и плавать. Это один из способов реализации множественного наследования в Java.

    Что такое интерфейсы?

        Интерфейс в Java - это коллекция абстрактных методов и констант, которые могут быть реализованы классами.
        Интерфейс определяет набор методов, которые должны быть реализованы классами, которые реализуют данный
        интерфейс. Классы могут реализовывать один или несколько интерфейсов, предоставляя реализацию всех их методов.

        Основные черты интерфейсов в Java:

        1. Абстрактность: Методы в интерфейсе являются абстрактными, то есть они не имеют реализации внутри интерфейса и
        не содержат тела метода.
        2. Интерфейсы могут содержать константы: Интерфейсы могут содержать константы, которые являются public, static и
        final.
        3. Множественная реализация: Классы могут реализовывать несколько интерфейсов, предоставляя реализацию всех их
        методов.
        4. Отсутствие состояния: Интерфейсы не могут иметь состояния в виде переменных экземпляра.
        5. Расширяемость: Интерфейсы могут быть расширены другими интерфейсами, путем наследования от других
        интерфейсов.

        Интерфейсы используются в Java для определения контрактов, которым должны соответствовать классы, реализующие
        эти интерфейсы. Интерфейсы предоставляют способ реализации множественного наследования в Java, позволяя классам
        реализовывать функциональность из нескольких источников.
